{"name":"Swiftyexpat","tagline":"Simple wrapper for the Expat XML parser.","body":"SwiftyExpat\r\n===========\r\n\r\nSimple wrapper for the Expat XML parser. Which had to be adjusted to use\r\nblocks instead of function pointer callbacks.\r\n\r\n###Targets\r\n\r\nThe project includes two targets:\r\n- SwiftyExpat\r\n- SwiftyExpatTests\r\n\r\nI suggest you start out looking at the SwiftyExpatTests.\r\n\r\n####SwiftyExpat\r\n\r\nThis is a tiny framework containing the modified Expat parser. Plus a small\r\nSwift class to make the API nicer, though this is not really necessary - the\r\nblock based Expat is reasonably easy to use from Swift.\r\n\r\n```Swift\r\nlet p = Expat()\r\n  .onStartElement   { name, attrs in println(\"<\\(name) \\(attrs)\")       }\r\n  .onEndElement     { name        in println(\">\\(name)\")                }\r\n  .onStartNamespace { prefix, uri in println(\"+NS[\\(prefix)] = \\(uri)\") }\r\n  .onEndNamespace   { prefix      in println(\"-NS[\\(prefix)]\")          }\r\n  .onError          { error       in println(\"ERROR: \\(error)\")         }\r\np.write(\"<hello>world</hello>\")\r\np.close()\r\n```\r\n\r\nThe raw Expat API works like this:\r\n```Swift\r\nvar p = XML_ParserCreate(\"UTF-8\")\r\nXML_SetStartElementHandler(p) { _, name, attrs in println(\"start tag \\(name)\") }\r\nXML_SetEndElementHandler  (p) { _, name        in println(\"end tag \\(name)\") }\r\n\r\nXML_Parse(parser, \"<hello/>\", 8, 0)\r\nXML_Parse(parser, \"\", 0, 1)\r\n\r\nXML_ParserFree(p); p = nil\r\n```\r\nYou get the idea ...\r\n\r\n####SwiftyExpatTests\r\n\r\nJust a tiny demo on how to invoke the parser.\r\n\r\n###Contact\r\n\r\n[@helje5](http://twitter.com/helje5) | helge@alwaysrightinstitute.com\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}